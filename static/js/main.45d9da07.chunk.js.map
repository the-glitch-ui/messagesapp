{"version":3,"sources":["components/messages/messagesBalloon.module.css","components/messages/messagesInput.module.css","components/messages.module.css","components/messages/messagesList.module.css","components/Footer.module.css","components/messages/messagesBalloon.jsx","components/messages/messagesList.jsx","components/messages/messagesInput.jsx","components/Footer.jsx","components/messages.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MessagesBalloon","author","message","time","className","BalloonStyles","container","container_answer","MessagesList","data","ListStyles","separation","map","key","id","MessagesInput","onChange","onClick","value","disabled","InputStyles","field","type","button","Footer","FooterStyles","main","Messages","state","talkingTo","conversation","currentMessage","isEnabled","handleClick","e","preventDefault","newMessage","length","getTime","setState","setTimeout","sendEndMessage","handleChange","target","timeNow","Date","getHours","getMinutes","this","MessagesStyles","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.45d9da07.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"messagesBalloon_container__2Guyf\",\"container_answer\":\"messagesBalloon_container_answer__2-a-x\",\"time\":\"messagesBalloon_time__2hMex\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"messagesInput_button__3S2Ha\",\"container\":\"messagesInput_container__3HrS9\",\"field\":\"messagesInput_field__15zbb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"author\":\"messages_author__1oCmS\",\"container\":\"messages_container__3rn0B\",\"main\":\"messages_main__1JjAD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"messagesList_container__1mbjo\",\"separation\":\"messagesList_separation__p21Sa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Footer_main___7wug\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport BalloonStyles from \"./messagesBalloon.module.css\";\n\nconst MessagesBalloon = ({ author, message, time }) => {\n  return (\n    <div\n      className={\n        author === \"me\"\n          ? `${BalloonStyles.container}`\n          : `${BalloonStyles.container_answer}`\n      }\n    >\n      <div className={BalloonStyles.time}>{time}</div>\n      <div className={BalloonStyles.message}>{message}</div>\n    </div>\n  );\n};\n\nMessagesBalloon.propTypes = {\n  author: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n  time: PropTypes.string.isRequired,\n};\n\nexport default MessagesBalloon;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport MessagesBalloon from \"./messagesBalloon.jsx\";\nimport ListStyles from \"./messagesList.module.css\";\n\nconst MessagesList = ({ data }) => {\n  return (\n    <>\n      <div className={ListStyles.container}>\n        <div className={ListStyles.separation}>&nbsp;</div>\n        {data.map((message) => (\n          <MessagesBalloon\n            key={message.id}\n            author={message.author}\n            time={message.time}\n            message={message.message}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nMessagesList.propTypes = {\n  data: PropTypes.array.isRequired,\n};\n\nexport default MessagesList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport InputStyles from \"./messagesInput.module.css\";\n\nconst MessagesInput = ({ onChange, onClick, value, disabled }) => {\n  return (\n    <form className={InputStyles.container}>\n      <input\n        className={InputStyles.field}\n        value={value}\n        onChange={onChange}\n        disabled={disabled}\n        type=\"text\"\n      ></input>\n      <button\n        className={InputStyles.button}\n        onClick={onClick}\n        disabled={disabled}\n      >\n        Send\n      </button>\n    </form>\n  );\n};\n\nMessagesInput.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  disabled: PropTypes.bool.isRequired,\n};\n\nexport default MessagesInput;\n","import React from \"react\";\nimport FooterStyles from \"./Footer.module.css\";\n\nconst Footer = () => {\n  return (\n    <footer className={FooterStyles.main}>&copy;The Glitch UI 2020</footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport MessagesList from \"./messages/messagesList.jsx\";\nimport MessagesInput from \"./messages/messagesInput.jsx\";\nimport Footer from \"./Footer\";\nimport MessagesStyles from \"./messages.module.css\";\n\nclass Messages extends Component {\n  state = {\n    talkingTo: \"Jeremy\",\n    conversation: [\n      {\n        id: 0,\n        author: \"talkingTo\",\n        time: \"15:30\",\n        message: \"Hey, ho!\",\n      },\n    ],\n    currentMessage: \"\",\n    isEnabled: true,\n  };\n\n  getTime() {\n    const timeNow = new Date();\n    const getAndFormatMinutes = () =>\n      timeNow.getMinutes() < 10\n        ? `0${timeNow.getMinutes()}`\n        : timeNow.getMinutes();\n    return `${timeNow.getHours()}:${getAndFormatMinutes()}`;\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n    if (this.state.currentMessage) {\n      const conversation = this.state.conversation;\n      const newMessage = {\n        id: this.state.conversation.length,\n        author: \"me\",\n        time: this.getTime(),\n        message: this.state.currentMessage,\n      };\n      this.setState({ conversation: [...conversation, newMessage] });\n      setTimeout(() => {\n        this.setState({ currentMessage: \"\" });\n        this.state.conversation.length > 5 && this.sendEndMessage();\n      }, 200);\n    }\n  };\n\n  handleChange = (e) => {\n    e.preventDefault();\n    this.setState({ currentMessage: e.target.value });\n  };\n\n  sendEndMessage = () => {\n    this.setState({ isEnabled: false });\n    const conversation = this.state.conversation;\n    const newMessage = {\n      id: this.state.conversation.length,\n      author: \"talkingTo\",\n      time: this.getTime(),\n      message: \"End of the demo. Thanks for testing!\",\n    };\n    this.setState({ conversation: [...conversation, newMessage] });\n  };\n\n  render() {\n    const {\n      conversation: data,\n      talkingTo,\n      currentMessage,\n      isEnabled,\n    } = this.state;\n    return (\n      <div className={MessagesStyles.main}>\n        <div className={MessagesStyles.container}>\n          <div className={MessagesStyles.author}>{talkingTo}</div>\n          <MessagesList data={data} />\n          <MessagesInput\n            value={currentMessage}\n            onChange={this.handleChange}\n            onClick={this.handleClick}\n            disabled={!isEnabled}\n          />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Messages;\n","import React from \"react\";\nimport Messages from \"./components/messages.jsx\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Messages />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}